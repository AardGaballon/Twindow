<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, February 21, 2022, 11:45 AM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Twindow" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Twindow"
   author="Gaballon"
   id="51d778e013b4e3262e0576ca"
   language="Lua"
   purpose="Improve Aardwolf user experience on tablets."
   save_state="y"
   date_written="2022-02-21 11:43:44"
   requires="5.07"
   version="1.0"
   >
<description trim="n">
<![CDATA[
==================== Twindow Help ====================
Author: Gaballon
	Commands: twin <arg>
	--------------------
	lock/unlock		- Locks or unlocks the window
	show/hide		- Shows or hides the window
	reset			- Resets window settings to default
	debug			- Turns on debug mode
	help			- What you are reading
]]>
</description>
</plugin>

<aliases>

<alias
   script="twin_command"
   match="^twin( lock| unlock| show| hide| reset| debug| help)?( .*)?"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>
 
</aliases>

<script>
<![CDATA[

require "themed_miniwindows"
require "tprint"

function twin_command(aliasname, aliasline, wildcards)
	debug_note("twin_command called with variables:\n name: " .. aliasname .. "\n line: " .. aliasline .. "\n wildcard1: " .. wildcards[1] .. "\n wildcard2: " .. wildcards[2])
	if wildcards[1] == " lock" then
		SetVariable("lock_down_miniwindows", "1")
		LockStatus()
	elseif wildcards[1] == " unlock" then
		SetVariable("lock_down_miniwindows", "0")
		LockStatus()
	elseif wildcards[1] == " show" then
		show_message("Showing window.")
		if not WindowInfo("twindow", 5) then
			my_window:show()
			show_window()
		end
	elseif wildcards[1] == " hide" then
		show_message("Hiding window.")
		if WindowInfo("twindow", 5) then
			my_window:hide()
		end
	elseif wildcards[1] == " reset" then
		show_message("Window reset to default position.")
		my_window:reset()
		my_window:show()
		show_window()
	elseif wildcards[1] == " debug" then
		if debug_mode then debug_mode = false else debug_mode = true end
		show_message("Debug mode set to: " .. string.upper(tostring(debug_mode)))
	elseif wildcards[1] == " help" then
		show_help()
	else
		show_message("Command not recognized.")
		Note("")
		show_help()
	end
end

function LockStatus()
	show_message("Current layout lock status:" .. ((GetVariable("lock_down_miniwindows") == "1") and "LOCKED") or "UNLOCKED")
end

function create_button(wid, bid, xposition, yposition, display_text, bcommand, bsendto, bwidth, bheight)
	WindowFont(WINDOW_ID, "button_font", selected_font, selected_font_size, true, false, false, false)
	local right, bottom = wid:add_button(
		bid, -- string, required, a unique identifier for this button
		xposition, -- integer, optional (default is my_window.bodyleft), where to put it in the window
		yposition, -- integer, optional (default is my_window.bodytop), where to put it in the window
		display_text, -- string, optional (default is nothing), what to write on the button
		true, -- boolean, optional (default is false), whether the text should be interpreted as utf8
		nil, -- string, optional (default is none), mouseover tooltip
		nil, -- function, optional (default is none), function to call when the button is pressed down
		function(flags, button_id) if bsendto then send_command(bcommand, bsendto) end end, -- function, optional (default is none), function to call when the pressed button is released
		"button_font", -- string, optional (default is my_win.title_font), which font to use
		nil, -- integer, optional, how much space between the button text and the edge of the button
		nil, -- integer, optional, how much space between the button text and the edge of the button
		bwidth, -- integer, optional, negates x_padding, manually set the button width
		bheight, -- integer, optional, negates y_padding, manually set the button height
		selected_style -- string, optionally one of Theme.STYLE_3D, Theme.STYLE_FLAT, Theme.STYLE_TRANSPARENT (default is flat)
	)
	debug_note("Created button at " .. tostring(xposition) .. "x " .. tostring(yposition) .. "y with button ID: " .. tostring(bid))
	return right, bottom
end

function show_window()
	my_window:blank()
	
	if align == "right" then
		-- column one
		local right, bottom = create_button(my_window, "minus", my_window.bodyright - default_edge - default_size_a, my_window.bodytop + default_edge, ctrl_lock and keypad_commands["Ctrl+-"] or keypad_commands["-"] or "-", ctrl_lock and "CtrlKeypadDash" or "KeypadDash", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "plus", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl++"] or keypad_commands["+"] or "+", ctrl_lock and "CtrlKeypadPlus" or "KeypadPlus", "DoCommand", default_size_a, 2 * default_size_a + default_padding_a)
		right, bottom = create_button(my_window, "enter", right - default_size_a, bottom + default_padding_a, utils.utf8encode(8592), "enter", "command", default_size_a, 2 * default_size_a + default_padding_a)
		-- column two
		right, bottom = create_button(my_window, "star", my_window.bodyright - default_edge - 2 * default_size_a - default_padding_a, my_window.bodytop + default_edge, ctrl_lock and keypad_commands["Ctrl+*"] or keypad_commands["*"] or "*", ctrl_lock and "CtrlKeypadStar" or "KeypadStar", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "nine", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+9"] or keypad_commands["9"] or "9", ctrl_lock and "CtrlKeypad9" or "Keypad9", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "six", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+6"] or keypad_commands["6"] or "6", ctrl_lock and "CtrlKeypad6" or "Keypad6", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "three", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+3"] or keypad_commands["3"] or "3", ctrl_lock and "CtrlKeypad3" or "Keypad3", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "dot", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+."] or keypad_commands["."] or ".", ctrl_lock and "CtrlKeypadDot" or "KeypadDot", "DoCommand", default_size_a, default_size_a)
		-- column three
		right, bottom = create_button(my_window, "slash", my_window.bodyright - default_edge - 3 * default_size_a - 2 * default_padding_a, my_window.bodytop + default_edge, ctrl_lock and keypad_commands["Ctrl+/"] or keypad_commands["/"] or "/", ctrl_lock and "CtrlKeypadSlash" or "KeypadSlash", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "eight", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+8"] or keypad_commands["8"] or "8", ctrl_lock and "CtrlKeypad8" or "Keypad8", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "five", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+5"] or keypad_commands["5"] or "5", ctrl_lock and "CtrlKeypad5" or "Keypad5", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "two", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+2"] or keypad_commands["2"] or "2", ctrl_lock and "CtrlKeypad2" or "Keypad2", "DoCommand", default_size_a, default_size_a)
		-- column four
		right, bottom = create_button(my_window, "ctrl", my_window.bodyright - default_edge - 4 * default_size_a - 3 * default_padding_a, my_window.bodytop + default_edge, "Ctrl", "Ctrl", "command", default_size_a, default_size_a)
		ctrl_right = right
		ctrl_bottom = bottom
		ctrl_top = bottom - default_size_a
		ctrl_left = right - default_size_a
		right, bottom = create_button(my_window, "seven", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+7"] or keypad_commands["7"] or "7", ctrl_lock and "CtrlKeypad7" or "Keypad7", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "four", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+4"] or keypad_commands["4"] or "4", ctrl_lock and "CtrlKeypad4" or "Keypad4", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "one", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+1"] or keypad_commands["1"] or "1", ctrl_lock and "CtrlKeypad1" or "Keypad1", "DoCommand", default_size_a, default_size_a)
		right, bottom = create_button(my_window, "zero", right - default_size_a, bottom + default_padding_a, ctrl_lock and keypad_commands["Ctrl+0"] or keypad_commands["0"] or "0", ctrl_lock and "CtrlKeypad0" or "Keypad0", "DoCommand", 2 * default_size_a + default_padding_a, default_size_a)
	else
	
	end
	if ctrl_lock then
		WindowRectOp(WINDOW_ID, 2, ctrl_left, ctrl_top, ctrl_right, ctrl_bottom, ColourNameToRGB("red"))
		debug_note("Ctrl was true, drawing rectangle on hotspot.")
	end
	my_window:dress_window()
	my_window:bring_to_front()
end

function send_command(b_c, s_t)
	debug_note("Send_command called with sendto: " .. tostring(s_t) .. " and command: " .. tostring(b_c))
	if s_t == "world" then
		SendSpecial(b_c, false, false, false, false)
	elseif s_t == "execute" then
		Execute(b_c)
	elseif s_t == "DoCommand" then
		DoCommand(b_c)
	else
		if b_c == "enter" then
				local command_to_execute = tostring(GetCommand())
				Execute(command_to_execute)
				debug_note("Executing command: " .. command_to_execute)
				SetCommand(PushCommand())
				SelectCommand()
		elseif b_c == "backspace" then
				local command_field = GetCommand()
				if string.len(command_field) > 1 and GetInfo(237) == 0 then
					SelectCommand()
					PasteCommand(string.sub(command_field, 1, string.len(command_field) - 1))
					debug_note("Backspace: " .. command_field .. " -> " ..  string.sub(command_field, 1, string.len(command_field) - 1))
				elseif string.len(command_field) > 1 and GetInfo(237) > 0 then
					PasteCommand("")
					debug_note("Backspace deleted selection")
				else
					SelectCommand()
					PasteCommand("")
					debug_note("Backspace results in clearing the command window.")
				end
		elseif b_c == "Ctrl" then
			if ctrl_lock == true then 
				ctrl_lock = false
			else
				ctrl_lock = true
			end
			show_window()
		else
			PasteCommand(b_c)
		end
	end
end

function init()
	WINDOW_ID = "twindow"

	--default_size = tonumber(GetVariable("default_size")) or 40
	default_size_a = 55
	default_size_b = 50
	--default_padding = tonumber(GetVariable("default_padding")) or 5
	default_padding_a = 8
	default_padding_b = 8
	--default_edge = tonumber(GetVariable("default_edge")) or 10
	default_edge = 10
	--default_width = tonumber(GetVariable("default_width")) or 1000
	--default_height = tonumber(GetVariable("default_height")) or 300
	selected_font = "Cooper"
	selected_font_size = 10
	selected_style = "STYLE_TRANSPARENT" --selected_style = "STYLE_FLAT"
	--w_width = tonumber(GetVariable("w_width"))
	--w_height = tonumber(GetVariable("w_height"))
	--w_x = tonumber(GetVariable("w_x"))
	--w_y = tonumber(GetVariable("w_y"))
	lock_down_miniwindows = tonumber(GetVariable("lock_down_miniwindows")) or 0
	w_a_width = 275
	w_a_height = 345
	w_a_x = GetInfo(250) - w_a_width
	w_a_y = GetInfo(249) - w_a_height - 50
	align = "right"
	ctrl_lock = false
	debug_mode = false

	local re = rex.new("<send>(.*)</send>")
	keypad_commands = {}
	for _,key in ipairs({"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "/", "*", "-", "+"}) do
		s, e, t = re:match(ExportXML(5, key))
		if t then
			keypad_commands[key] = t[1]
		end
		ctrl_key = "Ctrl+"..key
		s, e, t = re:match(ExportXML(5, ctrl_key))
		if t then
			keypad_commands[ctrl_key] = t[1]
		end
	end
	--tprint(keypad_commands)	
	
	my_window = ThemedBasicWindow(
		WINDOW_ID, -- id, string, required, a unique identifier for this window
		w_a_x, -- default_left_position, integer, required, where to put it if the player hasn't moved it
		w_a_y, -- default_top_position, integer, required, where to put it if the player hasn't moved it
		w_a_width, -- default_width, integer, required, how big to make it if the player hasn't moved it
		w_a_height, -- default_height, integer, required, how big to make it if the player hasn't moved it
		nil, -- title, string, optional (nil means no titlebar), text to put into the title
		nil, -- title_alignment, string, optional (default is "center"), "left", "center", or "right"
		false, -- is_temporary, boolean, optional (default is false), true adds a close button in the top left
		nil, -- resizer_type, nil/integer, optional (default is nil), nil for non-resizeable, 1 for demi, 2 for full
		nil, -- do_while_resizing, function, optional (default is nil), display function to call while resizing
		nil, -- do_after_resizing, function, optional (default is nil), display function to call after resizing is done
		nil, -- do_on_delete, function, optional (default is nil), cleanup function to call when closed/deleted
		selected_font, -- title_font_name, string, optional (default is Dina), override the default font name
		selected_font_size, -- title_font_size, integer, optional (default is 10), override the default font size
		false, -- defer_showing, boolean, optional (default is false), true will prevent the window from appearing until you call :show() on it
		true -- body_is_transparent, boolean, optional (default is false), if true, pixels the same color as Theme.PRIMARY_BODY will be transparent
	)
	
	show_window()
end

function show_message(message)
	ColourNote("violet", "", message)
end

function show_help()
	show_message(GetPluginInfo(GetPluginID(), 3))
end

function debug_note(...)
	local m = table.concat({...}, " ")
	if debug_mode then
		ColourNote("olive", "black", m)
	end
end

function OnPluginInstall()
	OnPluginEnable()
end

function OnPluginEnable()
	show_message("Twindow plugin enabled!")
	init()
end

function OnPluginSaveState()
	debug_note("SaveState has been called!")
	--[[
	if WindowInfo(WINDOW_ID, 3) then
		SetVariable("w_width", WindowInfo(WINDOW_ID, 3))
		SetVariable("w_height", WindowInfo(WINDOW_ID, 4))
		SetVariable("w_x", WindowInfo(WINDOW_ID, 10))
		SetVariable("w_y", WindowInfo(WINDOW_ID, 11))
		show_message("Saving variables width: " .. tostring(WindowInfo(WINDOW_ID, 3)) .. " | height: " .. tostring(WindowInfo(WINDOW_ID, 4)) .. " | x: " .. tostring(WindowInfo(WINDOW_ID, 10)) .. " | y: " .. tostring(WindowInfo(WINDOW_ID, 11)))
	end
	]]
end

function OnPluginDisable()
	show_message("Twindow plugin disabled!")
	WindowDelete(WINDOW_ID)
end

function OnPluginClose()
	OnPluginDisable()
end

function OnPluginThemeChange()

end

]]>
</script>

</muclient>
